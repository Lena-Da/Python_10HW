
import operation
import logging
from config import TOKEN
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

BUTTON, ADD, SEARCH, ALL, COMMENT = range(5)

ADD='‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É'
SEARCH='üîç –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É'
ALL='üìÉ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫'
GO='‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É'
EXIT='üö™ –í—ã–π—Ç–∏'

def start(update, _):
    reply_keyboard = [[ADD,SEARCH,ALL,EXIT]]
    markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ', reply_markup=markup_key)    
    return BUTTON

def button(update, _):
    user = update.message.from_user
    text = update.message.text
    keyboard_remove = ReplyKeyboardRemove()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª –æ–ø–µ—Ä–∞—Ü–∏—é %s",  user.first_name, text)
    if text == ADD:
        update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É', reply_markup=keyboard_remove)
        return ADD
    if text == SEARCH:
        update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∑–∞–¥–∞—á–µ', reply_markup=keyboard_remove)
        return SEARCH
    if text == ALL:
        return ALL
    if text == GO:
        return start(update, _)
    if text == EXIT:
        update.message.reply_text(f'–î–æ –≤—Å—Ç—Ä–µ—á–∏, {update.effective_user.first_name}', reply_markup=keyboard_remove)
        return cancel()

def add(update, _):
    global list_add
    list_add = []
    text = update.message.text
    list_add.append(text)
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ", list_add)
    update.message.reply_text('–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ: ')
    return COMMENT

def comment(update, _):
    text = update.message.text
    list_add.append(text)
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ", list_add)
    operation.write_csv(list_add)
    update.message.reply_text('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    reply_keyboard = [[GO,EXIT]]
    markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=markup_key)     
    return BUTTON

def search(update, _):
    user = update.message.from_user
    text = update.message.text
    result = operation.search_csv(text)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∏—â–µ—Ç %s",  user.first_name, text)  
    res = "\n\n".join(result)
    if result == '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å':
        update.message.reply_text(result)
    else:
        update.message.reply_text(f'–ù–∞—à–µ–ª –∑–∞–¥–∞—á—É:\n\n{res}')
    reply_keyboard = [[GO,EXIT]]
    markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=markup_key)      
    return BUTTON

def all(update, _):
    search_text=operation.read_csv()
    res = '\n\n'.join(str(l) for l in search_text)
    update.message.reply_text(f'–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: \n\n{res}')
    reply_keyboard = [[GO,EXIT]]
    markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=markup_key)      
    return BUTTON


def cancel(update, _):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.", user.first_name)
    update.message.reply_text(
        '–ü–∏—à–∏, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –º–æ—è –ø–æ–º–æ—â—å!', 
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END  
 

if __name__ == '__main__':
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            BUTTON: [MessageHandler(Filters.text, button)],
            ADD: [MessageHandler(Filters.text, add)],
            SEARCH: [MessageHandler(Filters.text, search)],
            ALL: [MessageHandler(Filters.text, all)],
            COMMENT: [MessageHandler(Filters.text, comment)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )


dispatcher.add_handler(conv_handler)


updater.start_polling()
updater.idle()